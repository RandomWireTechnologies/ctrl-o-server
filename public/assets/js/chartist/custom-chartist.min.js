!function (window, document, $) {
    "use strict";
    /* Line Animation */
    var cssAnimationData = {
        labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        series: [
            [1, 2, 2.7, 0, 3, 5, 3, 4, 8, 10, 12, 7, 9],
            [0, 1.2, 2, 7, 2.5, 9, 5, 8, 9, 11, 14, 4, 7],
            [10, 9, 8, 6.5, 6.8, 6, 5.4, 5.3, 4.5, 4.4, 3, 2.8, 4.8]
        ]
    },
    cssAnimationResponsiveOptions = [
        [{
                axisX: {
                    labelInterpolationFnc: function (value, index) {
                        return index % 2 !== 0 ? !1 : value
                    }
                }
            }]
    ];
    new Chartist.Line("#pageLineAnimation", cssAnimationData, null, cssAnimationResponsiveOptions);
    /* Line Scatter */
    var times = function (n) {
        return Array.apply(null, new Array(n));
    };
    var data = times(52).map(Math.random).reduce(function (data, rnd, index) {
        data.labels.push(index + 1);
        data.series.forEach(function (series) {
            series.push(Math.random() * 100)
        });
        return data;
    }, {
        labels: [],
        series: times(4).map(function () {
            return new Array()
        })
    });
    var options = {
        showLine: false,
        axisX: {
            labelInterpolationFnc: function (value, index) {
                return index % 13 === 0 ? 'W' + value : null;
            }
        }
    };
    var responsiveOptions = [
        ['screen and (min-width: 640px)', {
                axisX: {
                    labelInterpolationFnc: function (value, index) {
                        return index % 4 === 0 ? 'W' + value : null;
                    }
                }
            }]
    ];
    new Chartist.Line('#pageLineScatter', data, options, responsiveOptions);

    /* Area Line */

    new Chartist.Line('#pageAreaLine', {
        labels: [1, 2, 3, 4, 5, 6, 7, 8],
        series: [
            [5, 9, 7, 8, 5, 3, 5, 4]
        ]
    }, {
        low: 0,
        showArea: true
    });
    /* Area Only */
    new Chartist.Line('#pageAreaOnly', {
        labels: [1, 2, 3, 4, 5, 6, 7, 8],
        series: [
            [1, 2, 3, 1, -2, 0, 1, 0],
            [-2, -1, -2, -1, -2.5, -1, -2, -1],
            [0, 0, 0, 1, 2, 2.5, 2, 1],
            [2.5, 2, 1, 0.5, 1, 0.5, -1, -2.5]
        ]
    }, {
        high: 3,
        low: -3,
        showArea: true,
        showLine: false,
        showPoint: false,
        fullWidth: true,
        axisX: {
            showLabel: false,
            showGrid: false
        }
    });
    /* Smil Animations */
    var chart1 = new Chartist.Line('#pageSmilAnimations', {
        labels: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
        series: [
            [12, 9, 7, 8, 5, 4, 6, 2, 3, 3, 4, 6],
            [4, 5, 3, 7, 3, 5, 5, 3, 4, 4, 5, 5],
            [5, 3, 4, 5, 6, 3, 3, 4, 5, 6, 3, 4],
            [3, 4, 5, 6, 7, 6, 4, 5, 6, 7, 6, 3]
        ]
    }, {
        low: 0
    });
    var seq = 0,
            delays = 80,
            durations = 500;
    chart1.on('created', function () {
        seq = 0;
    });
    chart1.on('draw', function (data) {
        seq++;
        if (data.type === 'line') {

            data.element.animate({
                opacity: {
                    begin: seq * delays + 1000,
                    dur: durations,
                    from: 0,
                    to: 1
                }
            });
        } else if (data.type === 'label' && data.axis === 'x') {
            data.element.animate({
                y: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.y + 100,
                    to: data.y,
                    easing: 'easeOutQuart'
                }
            });
        } else if (data.type === 'label' && data.axis === 'y') {
            data.element.animate({
                x: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.x - 100,
                    to: data.x,
                    easing: 'easeOutQuart'
                }
            });
        } else if (data.type === 'point') {
            data.element.animate({
                x1: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.x - 10,
                    to: data.x,
                    easing: 'easeOutQuart'
                },
                x2: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.x - 10,
                    to: data.x,
                    easing: 'easeOutQuart'
                },
                opacity: {
                    begin: seq * delays,
                    dur: durations,
                    from: 0,
                    to: 1,
                    easing: 'easeOutQuart'
                }
            });
        } else if (data.type === 'grid') {

            var pos1Animation = {
                begin: seq * delays,
                dur: durations,
                from: data[data.axis.units.pos + '1'] - 30,
                to: data[data.axis.units.pos + '1'],
                easing: 'easeOutQuart'
            };
            var pos2Animation = {
                begin: seq * delays,
                dur: durations,
                from: data[data.axis.units.pos + '2'] - 100,
                to: data[data.axis.units.pos + '2'],
                easing: 'easeOutQuart'
            };
            var animations = {};
            animations[data.axis.units.pos + '1'] = pos1Animation;
            animations[data.axis.units.pos + '2'] = pos2Animation;
            animations['opacity'] = {
                begin: seq * delays,
                dur: durations,
                from: 0,
                to: 1,
                easing: 'easeOutQuart'
            };
            data.element.animate(animations);
        }
    });


    chart1.on('created', function () {
        if (window.__exampleAnimateTimeout) {
            clearTimeout(window.__exampleAnimateTimeout);
            window.__exampleAnimateTimeout = null;
        }
        window.__exampleAnimateTimeout = setTimeout(chart1.update.bind(chart1), 12000);
    });


    var chart4 = new Chartist.Line('#pageSeriesOverrides', {
        labels: ['1', '2', '3', '4', '5', '6', '7', '8'],
        series: [{
                name: 'series-1',
                data: [5, 2, -4, 2, 0, -2, 5, -3]
            }, {
                name: 'series-2',
                data: [4, 3, 5, 3, 1, 3, 6, 4]
            }, {
                name: 'series-3',
                data: [2, 4, 3, 1, 4, 5, 3, 2]
            }]
    }, {
        fullWidth: true,
        series: {
            'series-1': {
                lineSmooth: Chartist.Interpolation.step()
            },
            'series-2': {
                lineSmooth: Chartist.Interpolation.simple(),
                showArea: true
            },
            'series-3': {
                showPoint: false
            }
        }
    }, [
        ['screen and (max-width: 320px)', {
                series: {
                    'series-1': {
                        lineSmooth: Chartist.Interpolation.none()
                    },
                    'series-2': {
                        lineSmooth: Chartist.Interpolation.none(),
                        showArea: false
                    },
                    'series-3': {
                        lineSmooth: Chartist.Interpolation.none(),
                        showPoint: true
                    }
                }
            }]
    ]);

    var chart3 = new Chartist.Bar('#pagePeakCircles', {
        labels: ['W1', 'W2', 'W3', 'W4', 'W5', 'W6', 'W7', 'W8'],
        series: [
            [2, 4, 8, 5, -2, -1, -4, -6]
        ]
    }, {
        high: 10,
        low: -10,
        axisX: {
            labelInterpolationFnc: function (value, index) {
                return index % 2 === 0 ? value : null;
            }
        }
    });


    chart3.on('draw', function (data) {

        if (data.type === 'bar') {

            data.group.append(new Chartist.Svg('circle', {
                cx: data.x2,
                cy: data.y2,
                r: Math.abs(Chartist.getMultiValue(data.value)) * 2 + 5
            }, 'ct-slice-pie'));
        }
    });

    /* Horizontal Bar */
    new Chartist.Bar('#pageHorizontalBar', {
        labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
        series: [
            [5, 4, 3, 7, 5, 10, 3],
            [3, 2, 9, 5, 4, 6, 4]
        ]
    }, {
        seriesBarDistance: 10,
        reverseData: true,
        horizontalBars: true,
        axisY: {
            offset: 70
        }
    });
}(window, document, jQuery);