!function (document, window, $) {
    "use strict",
            function () {
                $("#setTimeButton").on("click", function () {
                    $("#inputTextCurrent").timepicker("setTime", new Date)
                })
            }(),
            function () {
                var engine = new Bloodhound({
                    local: [{
                            value: "red"
                        }, {
                            value: "blue"
                        }, {
                            value: "green"
                        }, {
                            value: "yellow"
                        }, {
                            value: "violet"
                        }, {
                            value: "brown"
                        }, {
                            value: "purple"
                        }, {
                            value: "black"
                        }, {
                            value: "white"
                        }],
                    datumTokenizer: Bloodhound.tokenizers.obj.whitespace("value"),
                    queryTokenizer: Bloodhound.tokenizers.whitespace
                });

                $("input[data-plugin='labelauty']").labelauty({same_width: !0});

                $("#inputTokenfieldTypeahead").tokenfield({
                    typeahead: [null, {
                            name: "engine",
                            displayKey: "value",
                            source: engine.ttAdapter()
                        }]
                })
            }(),
            function () {
                $("#inputTokenfieldEvents").on("tokenfield:createtoken", function (e) {
                    var data = e.attrs.value.split("|");
                    e.attrs.value = data[1] || data[0], e.attrs.label = data[1] ? data[0] + " (" + data[1] + ")" : data[0]
                }).on("tokenfield:createdtoken", function (e) {
                    var re = /\S+@\S+\.\S+/,
                            valid = re.test(e.attrs.value);
                    valid || $(e.relatedTarget).addClass("invalid")
                }).on("tokenfield:edittoken", function (e) {
                    if (e.attrs.label !== e.attrs.value) {
                        var label = e.attrs.label.split(" (");
                        e.attrs.value = label[0] + "|" + e.attrs.value
                    }
                }).on("tokenfield:removedtoken", function (e) {
                    if (e.attrs.length > 1) {
                        var values = $.map(e.attrs, function (attrs) {
                            return attrs.value
                        });
                        alert(e.attrs.length + " tokens removed! Token values were: " + values.join(", "))
                    } else
                        alert("Token removed! Token value was: " + e.attrs.value)
                }).tokenfield()
            }(),
            function () {
                var cities = new Bloodhound({
                    datumTokenizer: Bloodhound.tokenizers.obj.whitespace("text"),
                    queryTokenizer: Bloodhound.tokenizers.whitespace,
                    prefetch: "../assets/data/cities.json"
                });
                cities.initialize();
                var options = $.extend(!0, {},{
                    itemValue: "value",
                    itemText: "text",
                    typeaheadjs: [{
                            hint: !0,
                            highlight: !0,
                            minLength: 1
                        }, {
                            name: "cities",
                            displayKey: "text",
                            source: cities.ttAdapter()
                        }]
                }),
                        $input = $("#inputTagsObject");
                $input.tagsinput(options), $input.tagsinput("add", {
                    value: 1,
                    text: "Amsterdam",
                    continent: "Europe"
                }), $input.tagsinput("add", {
                    value: 4,
                    text: "Washington",
                    continent: "America"
                }), $input.tagsinput("add", {
                    value: 7,
                    text: "Sydney",
                    continent: "Australia"
                }), $input.tagsinput("add", {
                    value: 10,
                    text: "Beijing",
                    continent: "Asia"
                }), $input.tagsinput("add", {
                    value: 13,
                    text: "Cairo",
                    continent: "Africa"
                })
            }(),
            function () {
                var cities = new Bloodhound({
                    datumTokenizer: Bloodhound.tokenizers.obj.whitespace("text"),
                    queryTokenizer: Bloodhound.tokenizers.whitespace,
                    prefetch: "../assets/data/cities.json"
                });
                cities.initialize();
                var options = $.extend(!0, {},{
                    tagClass: function (item) {
                        switch (item.continent) {
                            case "Europe":
                                return "label label-primary";
                            case "America":
                                return "label label-danger";
                            case "Australia":
                                return "label label-success";
                            case "Africa":
                                return "label label-default";
                            case "Asia":
                                return "label label-warning"
                        }
                    },
                    itemValue: "value",
                    itemText: "text",
                    typeaheadjs: [{
                            hint: !0,
                            highlight: !0,
                            minLength: 1
                        }, {
                            name: "cities",
                            displayKey: "text",
                            source: cities.ttAdapter()
                        }]
                }),
                        $input = $("#inputTagsCategorizing");
                $input.tagsinput(options), $input.tagsinput("add", {
                    value: 1,
                    text: "Amsterdam",
                    continent: "Europe"
                }), $input.tagsinput("add", {
                    value: 4,
                    text: "Washington",
                    continent: "America"
                }), $input.tagsinput("add", {
                    value: 7,
                    text: "Sydney",
                    continent: "Australia"
                }), $input.tagsinput("add", {
                    value: 10,
                    text: "Beijing",
                    continent: "Asia"
                }), $input.tagsinput("add", {
                    value: 13,
                    text: "Cairo",
                    continent: "Africa"
                })
            }(),
            function () {
                $("#inputSpinnerCustomFormat").asSpinner({
                    namespace: "spinnerUi",
                    skin: null,
                    min: "-10",
                    max: 100, mousewheel: !0,
                    format: function (value) {
                        return value + "%"
                    }
                })
            }(),
            function () {
                $(".multi-select-methods").multiSelect(), $("#buttonSelectAll").on("click", function () {
                    return $(".multi-select-methods").multiSelect("select_all"), !1
                }), $("#buttonDeselectAll").on("click", function () {
                    return $(".multi-select-methods").multiSelect("deselect_all"), !1
                }), $("#buttonSelectSome").on("click", function () {
                    return $(".multi-select-methods").multiSelect("select", ["Idaho", "Montana", "Arkansas"]), !1
                }), $("#buttonDeselectSome").on("click", function () {
                    return $(".multi-select-methods").multiSelect("select", ["Idaho", "Montana", "Arkansas"]), !1
                }), $("#buttonRefresh").on("click", function () {
                    return $(".multi-select-methods").multiSelect("refresh"), !1
                }), $("#buttonAdd").on("click", function () {
                    return $(".multi-select-methods").multiSelect("addOption", {
                        value: 42,
                        text: "test 42",
                        index: 0
                    }), !1
                })
            }(),
            function () {
                var states = ["Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming"];
                !function () {
                    var substringMatcher = function (strs) {
                        return function (q, cb) {
                            var matches, substrRegex;
                            matches = [], substrRegex = new RegExp(q, "i"), $.each(strs, function (i, str) {
                                substrRegex.test(str) && matches.push(str)
                            }), cb(matches)
                        }
                    };
                    $("#TypeaheadBasic, #TypeaheadStyle").typeahead({
                        hint: !0,
                        highlight: !0,
                        minLength: 1
                    }, {
                        name: "states",
                        source: substringMatcher(states)
                    })
                }(),
                        function () {
                            var states = ["Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming"],
                                    state = new Bloodhound({
                                        datumTokenizer: Bloodhound.tokenizers.whitespace,
                                        queryTokenizer: Bloodhound.tokenizers.whitespace,
                                        local: states
                                    });
                            $("#TypeaheadBloodhound").typeahead({
                                hint: !0,
                                highlight: !0,
                                minLength: 1
                            }, {
                                name: "states",
                                source: state
                            })
                        }(),
                        function () {
                            var countries = new Bloodhound({
                                datumTokenizer: Bloodhound.tokenizers.whitespace,
                                queryTokenizer: Bloodhound.tokenizers.whitespace,
                                prefetch: "../assets/data/countries.json"
                            });
                            $("#TypeaheadPrefetch").typeahead(null, {
                                name: "countries",
                                source: countries
                            })
                        }()
            }()
}(document, window, jQuery);


/*----- token field -----*/
$('#tokenfield').tokenfield();
$('#inputTokenfieldSuccess').tokenfield();
$('#inputTokenfieldWarning').tokenfield();
$('#inputTokenfieldError').tokenfield();
$('#searchTokenfield').tokenfield();
$('#disabledTokenfield').tokenfield();
$('#inputformgroup').tokenfield();
$('#inputformgroupicon').tokenfield();
/*------ select2 ------*/
$('.select2').select2({width:"style",theme:"material"});
$('#my-select').multiSelect({});
$('#basic2').selectpicker({
    liveSearch: true,
    maxOptions: 1
});
$('.basicspinner').asSpinner({namespace: "spinnerUi", skin: null, min: "-10", max: 100, mousewheel: !0});
/*------ touchspin -------*/
$("input[name='touchSpinVertical']").TouchSpin({
    verticalbuttons: true
});
$('.clockpicker').clockpicker({donetext: "Done"});
$('.timepicker').clockpicker({autoclose: true});
$('.basictimepicker').timepicker();
$(".datepicker").datepicker({autoclose: !0});
$(".multidatepicker").datepicker({multidate: true, autoclose: !0});
$('.datarange').datepicker({
    autoclose: !0
});
// initialize input widgets first
$('.datepair-time').timepicker({
    'showDuration': true,
    'timeFormat': 'g:ia'
});
$('.datepair-date').datepicker({
    'format': 'm/d/yyyy',
    'autoclose': true
});
$("#datepair").datepair({
    startClass: "datepair-start",
    endClass: "datepair-end",
    timeClass: "datepair-time",
    dateClass: "datepair-date"
});
$(".asColorpicker").asColorPicker({
    namespace: "colorInputUi"
});
$('#inlineDatepicker').datepicker({});

if ($.fn.card) {
    $('[data-plugin="card"]').each(function () {
        var options = $.extend({}, $(this).data());
        options.target && (options.container = $(options.target)), $(this).card(options)
    })
}
$(".rangeone").asRange({
    namespace: "rangeUi",
    step: 1,
    min: 2,
    max: 12,
    value: 6
});
$(".range-single").asRange({
    namespace: 'rangeUi',
    step: 0.1,
    min: 2,
    max: 12,
    range: true,
    value: [3, 9]
});
$(".rangethree").asRange({
    namespace: 'rangeUi',
    step: 1,
    min: 2,
    tip: true,
    max: 12,
    range: true,
    value: 6
});
$(".rangeforth").asRange({
    namespace: 'rangeUi',
    step: 1,
    min: 2,
    tip: true,
    max: 12,
    range: true,
    value: [5, 10]
});
$(".rangefive").asRange({
    namespace: 'rangeUi',
    step: 1,
    min: 2,
    tip: true,
    max: 12,
    range: true,
    value: [6, 8]
});