<?php 

namespace $NAMESPACE_CONTROLLER$;

use Illuminate\Http\Request;
use $BASE_CONTROLLER$;
use $NAMESPACE_MODEL$\$MODEL_NAME$;
use $NAMESPACE_REQUEST$\Create$MODEL_NAME$Request;
use $NAMESPACE_REQUEST$\Update$MODEL_NAME$Request;
use Illuminate\Database\Eloquent\ModelNotFoundException;

class $MODEL_NAME$Controller extends Controller
{
    /**
     * Display a listing of the $MODEL_NAME$.
     *
     * @return Response
     */
    public function index()
    {
        bcs('$MODEL_NAME_PLURAL_CAMEL$');

        $data['fields']   = $MODEL_NAME$::grid();
        $data['rules']    = encode($MODEL_NAME$::$validationRules);
        $data['messages'] = encode($MODEL_NAME$::$validationMessages);

        return view('$VIEW_PATH$$VIEW_FOLDER_NAME$.index', $data);
    }

    /**
     * Return an API listing of $MODEL_NAME_PLURAL_CAMEL$.
     * 
     * @param  Request $request
     * @param  $MODEL_NAME$ $$MODEL_NAME_LOWER$
     * @return Response
     */
    public function list(Request $request, $MODEL_NAME$ $$MODEL_NAME_LOWER$)
    {
        $$MODEL_NAME_LOWER_PLURAL$ = $$MODEL_NAME_LOWER$->search($request);

        return response()->json($$MODEL_NAME_LOWER_PLURAL$);
    }

    /**
     * Store a newly created $MODEL_NAME$ in storage.
     *
     * @param Create$MODEL_NAME$Request $request
     * @return Response
     */
    public function store(Create$MODEL_NAME$Request $request)
    {
        $json = [
            'type'    => 'error',
            'title'   => 'Whoops',
            'message' => 'Your $MODEL_NAME$ could not be created at this time. Please try again.',
            'item'    => null
        ];

        if ($$MODEL_NAME_LOWER$ = $MODEL_NAME$::create($request->all())) {
            $json['type']    = 'success';
            $json['title']   = '$MODEL_NAME$ Created';
            $json['message'] = 'Your $MODEL_NAME$ was created successfully, super sweet!';
            $json['item']    = $$MODEL_NAME_LOWER$->toJson();
        }

        return response()->json($json);
    }

    /**
     * Update the specified $MODEL_NAME$ in storage.
     *
     * @param  int $id
     * @param  Update$MODEL_NAME$Request $request
     * @return Response
     */
    public function update($id, Update$MODEL_NAME$Request $request)
    {
        $json = [
            'type'    => 'error',
            'title'   => 'Whoops',
            'message' => 'Your $MODEL_NAME$ could not be updated at this time. Please try again.'
        ];

        $$MODEL_NAME_CAMEL$ = $this->exist($id);
        
        $$MODEL_NAME_CAMEL$->fill($request->all());

        if ($$MODEL_NAME_CAMEL$->save()) {
            $json['type']    = 'success';
            $json['title']   = '$MODEL_NAME$ Saved';
            $json['message'] = 'Your $MODEL_NAME$ was updated successfully, nice job!';
        }

        return response()->json($json);
    }

    /**
     * Remove the specified $MODEL_NAME$ from storage.
     *
     * @param  int $id
     * @return Response
     */
    public function destroy($id)
    {
        $json = [
            'type'    => 'error',
            'title'   => 'Whoops',
            'message' => 'Your $MODEL_NAME$ could not be deleted at this time. Please try again.'
        ];

        $$MODEL_NAME_CAMEL$ = $this->exist($id);

        if ($$MODEL_NAME_CAMEL$->delete()) {
            $json['type']    = 'success';
            $json['title']   = '$MODEL_NAME$ Deleted';
            $json['message'] = 'Your $MODEL_NAME$ was deleted successfully, WOOT!';
        }

        return response()->json($json);
    }

    /**
     * Check if a record exists.
     *
     * @param  int $id
     * @return Eloquent
     */
    private function exist($id)
    {
        try {
            $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::findOrFail($id);

        } catch (ModelNotFoundException $e) {
            
            flash($MESSAGE_NOT_FOUND$, 'danger');

            return redirect(route('$ROUTE_PREFIX$$RESOURCE_URL$.index'));
        }

        return $$MODEL_NAME_CAMEL$;
    }
}
